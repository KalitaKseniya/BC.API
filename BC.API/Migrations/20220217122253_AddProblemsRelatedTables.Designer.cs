// <auto-generated />
using System;
using BC.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BC.API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220217122253_AddProblemsRelatedTables")]
    partial class AddProblemsRelatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BC.API.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BC.API.Models.Bicycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Bicycles");
                });

            modelBuilder.Entity("BC.API.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("BC.API.Models.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("BC.API.Models.PartModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PartId");

                    b.ToTable("PartModels");
                });

            modelBuilder.Entity("BC.API.Models.PartModelProblem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("PartModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PricePerDetail")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserChosenPartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartModelId");

                    b.HasIndex("UserChosenPartId");

                    b.HasIndex("ProblemId", "PartModelId")
                        .IsUnique()
                        .HasFilter("[PartModelId] IS NOT NULL");

                    b.ToTable("PartModelProblems");
                });

            modelBuilder.Entity("BC.API.Models.Problem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BicycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("Stage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BicycleId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("BC.API.Models.PartModel", b =>
                {
                    b.HasOne("BC.API.Models.Manufacturer", "Manufacturer")
                        .WithMany("PartModels")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BC.API.Models.Part", "Part")
                        .WithMany("PartModels")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("BC.API.Models.PartModelProblem", b =>
                {
                    b.HasOne("BC.API.Models.PartModel", "PartModel")
                        .WithMany("PartModelProblems")
                        .HasForeignKey("PartModelId");

                    b.HasOne("BC.API.Models.Problem", "Problem")
                        .WithMany("PartModelProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BC.API.Models.Part", "Part")
                        .WithMany("PartModelProblems")
                        .HasForeignKey("UserChosenPartId");

                    b.Navigation("Part");

                    b.Navigation("PartModel");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("BC.API.Models.Problem", b =>
                {
                    b.HasOne("BC.API.Models.Address", "Address")
                        .WithMany("Problems")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BC.API.Models.Bicycle", "Bicycle")
                        .WithMany("Problems")
                        .HasForeignKey("BicycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Bicycle");
                });

            modelBuilder.Entity("BC.API.Models.Address", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("BC.API.Models.Bicycle", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("BC.API.Models.Manufacturer", b =>
                {
                    b.Navigation("PartModels");
                });

            modelBuilder.Entity("BC.API.Models.Part", b =>
                {
                    b.Navigation("PartModelProblems");

                    b.Navigation("PartModels");
                });

            modelBuilder.Entity("BC.API.Models.PartModel", b =>
                {
                    b.Navigation("PartModelProblems");
                });

            modelBuilder.Entity("BC.API.Models.Problem", b =>
                {
                    b.Navigation("PartModelProblems");
                });
#pragma warning restore 612, 618
        }
    }
}
